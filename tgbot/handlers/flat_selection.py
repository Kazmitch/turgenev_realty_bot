from typing import Union

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from tgbot.keyboards.building_menu import building
from tgbot.keyboards.flat_selection import flat_selection_keyboard, flat_params, flat_selection_cd, \
    type_value_keyboard, show_flat_cd
from tgbot.keyboards.flat_selection import order_flats_keyboard
from tgbot.keyboards.send_contact import contact_markup
from tgbot.states.flat_selection import FlatStates
from tgbot.states.send_contact import ContactStates
from tgbot.utils.offers import get_all_offers


async def make_text(building_name: str, chosen_params: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç."""

    min_max_values = await get_all_offers(building_name)
    max_price = min_max_values.get('max_price').split('.')[0][:-6]
    low_price = min_max_values.get('low_price').split('.')[0][:-6]
    max_area = min_max_values.get('max_area')
    low_area = min_max_values.get('low_area')
    area = int(chosen_params.get('flat_area'))
    price = int(chosen_params.get('flat_price'))
    year = int(chosen_params.get('flat_year'))
    rooms = int(chosen_params.get('flat_rooms'))
    text = f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n' \
           f'–∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ç <b>{low_price} –º–ª–Ω —Ä—É–±.</b> –¥–æ <b>{max_price} –º–ª–Ω —Ä—É–±.</b>\n' \
           f'–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ –æ—Ç <b>{low_area} –º¬≤</b> –¥–æ <b>{max_area} –º¬≤</b>\n' \
           f'\n' \
           f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n' \
           f'–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –æ—Ç: {area if area != 0 else "–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"}\n' \
           f'–¶–µ–Ω–∞ –¥–æ: {price if price != 0 else "–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"}\n' \
           f'–ì–æ–¥ —Å–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞: {year if year != 0 else "–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"}\n' \
           f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {rooms if rooms != 0 else "–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"}\n' \
           f'\n' \
           f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"'
    return text


async def flat_selection(call: Union[CallbackQuery, Message], state: FSMContext = None, values: dict = None,
                         callback_data: dict = None, **kwargs):
    """–•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã'."""
    params = {
        'flat_area': 0,
        'flat_price': 0,
        'flat_year': 0,
        'flat_rooms': 0
    }
    if callback_data:
        try:
            data = await state.get_data()
            params.update(data.get('params'))
            await state.update_data(building_name=callback_data.get('name'))
            building_name = callback_data.get('name')
        except TypeError:
            await state.update_data(building_name=callback_data.get('name'))
            building_name = callback_data.get('name')
    else:
        data = await state.get_data()
        building_name = data.get('building_name')

    if values:
        data = await state.get_data()
        params.update(data.get('params'))
        params.update(values)
    data = await state.get_data()
    await state.update_data(params=params)
    text = await make_text(building_name, params)
    markup = await flat_selection_keyboard(building_name)
    if isinstance(call, CallbackQuery):
        await call.message.answer(text=text, reply_markup=markup)
        await call.message.delete()
    else:
        msg_id = int(data.get('msg_id'))
        message = call
        await message.answer(text=text, reply_markup=markup)
        await message.bot.delete_message(message.chat.id, msg_id)
        await message.delete()


async def type_params(call: Union[CallbackQuery, Message], state: FSMContext, error: bool = False,
                      callback_data: dict = None,
                      **kwargs):
    """–í–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è."""

    if error:
        data = await state.get_data()
        option = data.get('option')
        building_name = data.get('building_name')
        texts = {
            'flat_area': '–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å(\n'
                         '\n'
                         '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>25</b>',
            'flat_price': '–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å(\n'
                          '\n'
                          '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>30</b>',
            'flat_year': '–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å(\n'
                         '\n'
                         '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>2022</b>',
            'flat_rooms': '–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å(\n'
                          '\n'
                          '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>2</b>',
        }
        text = texts.get(option)
        msg_id = int(data.get('msg_id'))
        markup = await type_value_keyboard(building_name)
        message = call
        msg = await message.answer(text=text, reply_markup=markup)
        await message.bot.delete_message(message.chat.id, msg_id)
        await message.delete()
        await state.update_data(msg_id=msg.message_id)
    else:
        option = callback_data.get('option')
        await state.update_data(option=option)
        building_name = callback_data.get('building_name')

        texts = {
            'flat_area': '–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç? (–≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —á–∏—Å–ª–æ , –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>25</b>)',
            'flat_price': '–ü–æ–¥—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, üí´ –î–æ –∫–∞–∫–æ–π —Ü–µ–Ω—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å –≤–∞—Ä–∏–∞–Ω—Ç—ã?  (–≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —á–∏—Å–ª–æ , –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>30</b>)',
            'flat_year': 'üéâ –í –∫–∞–∫–æ–º –≥–æ–¥—É –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏? (–≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥–æ–¥ —Å–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä : <b>2022</b>)',
            'flat_rooms': '–ê —Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–≤–æ–∏—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö? (–≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —á–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç , –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>2</b>)',
        }
        text = texts.get(option)
        markup = await type_value_keyboard(building_name)
        msg = await call.message.answer(text=text, reply_markup=markup)
        await state.update_data(msg_id=msg.message_id)
        await call.message.delete()
    if option == 'flat_area':
        await FlatStates.flat_area.set()
    if option == 'flat_price':
        await FlatStates.flat_price.set()
    if option == 'flat_year':
        await FlatStates.flat_year.set()
    if option == 'flat_rooms':
        await FlatStates.flat_rooms.set()


async def update_params(message: Union[CallbackQuery, Message], state: FSMContext, callback_data: dict = None,
                        **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""

    state_name = await state.get_state()
    key = state_name.split(':')[1]
    if isinstance(message, Message):
        try:
            value = message.text
            int(value)
            if key == 'flat_year' and len(value) != 4:
                await type_params(message, state=state, error=True)
            else:
                chosen_params = {key: value}
                await flat_selection(message, state=state, values=chosen_params)
        except ValueError:
            await type_params(message, state=state, error=True)
    else:
        value = callback_data.get('param')
        chosen_params = {key: value}
        await flat_selection(message, state=state, values=chosen_params)


async def show_flats(call: CallbackQuery, state: FSMContext, callback_data: dict, **kwargs):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –≤—ã–±–æ—Ä."""
    data = await state.get_data()
    building_name = data.get('building_name')
    params = data.get('params')
    try:
        min_max_values = await get_all_offers(building_name=building_name, params=params)
        max_price = min_max_values.get('max_price')[:-6]
        low_price = min_max_values.get('low_price')[:-6]
        max_area = min_max_values.get('max_area')
        low_area = min_max_values.get('low_area')
        markup = await order_flats_keyboard(building_name)
        await call.message.answer(text=f'–ü–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–≤–∞—Ä—Ç–∏—Ä:\n'
                                       f'–ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç <b>{low_price} –º–ª–Ω —Ä—É–±.</b> –¥–æ <b>{max_price} –º–ª–Ω —Ä—É–±.</b>\n'
                                       f'–∏ –ø–ª–æ—â–∞–¥–∏ –æ—Ç <b>{low_area} –º¬≤</b> –¥–æ <b>{max_area} –º¬≤</b>',
                                  reply_markup=markup)
        await FlatStates.flat_data.set()
        await call.message.edit_reply_markup(reply_markup=None)
        await call.message.delete()
        await state.update_data(section='offers')
    except ValueError:
        markup = await contact_markup(building_name)
        await call.message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n'
                                       '–î–∞–≤–∞–π—Ç–µ –ø–æ–º–æ–∂–µ–º –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å', reply_markup=markup)
        await call.message.edit_reply_markup(reply_markup=None)
        await call.message.delete()
        await ContactStates.building_name.set()


def register_selection_flat(dp: Dispatcher):
    dp.register_callback_query_handler(flat_selection, building.filter(section='flats'),
                                       state='*')
    dp.register_callback_query_handler(type_params, flat_selection_cd.filter(), state='*')
    dp.register_callback_query_handler(update_params, flat_params.filter(),
                                       state=[FlatStates.flat_area, FlatStates.flat_price, FlatStates.flat_year,
                                              FlatStates.flat_rooms])
    dp.register_message_handler(update_params, state=[FlatStates.flat_area, FlatStates.flat_price, FlatStates.flat_year,
                                                      FlatStates.flat_rooms])
    dp.register_callback_query_handler(show_flats, show_flat_cd.filter(), state='*')
